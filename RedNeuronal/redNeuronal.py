# -*- coding: utf-8 -*-
"""Te damos la bienvenida a Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

# Importación librerías.

import tensorflow as tf
import numpy as np

# Arrays con la enytrada de datos y la salida.

celsius = np.array([-40, -10, 0, 8, 15, 22, 38], dtype=float)
fahrenheit = np.array([-40, 14, 32, 46, 59, 72, 100], dtype=float)

# Creación de capa y de modelo de tipo secuencial.

#capa = tf.keras.layers.Dense(units=1, input_shape=[1])
#modelo = tf.keras.Sequential([capa])

#Agregando mas capas y neuronas.
oculta1 = tf.keras.layers.Dense(units=3, input_shape=[1])
oculta2 = tf.keras.layers.Dense(units=3)
salida = tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([oculta1, oculta2, salida])

# Compilación del modelo.

modelo.compile(
    optimizer=tf.keras.optimizers.Adam(0.1),
    loss='mean_squared_error'
)

# Entrenamiento

print("Comenzando entrenamiento")
historial = modelo.fit(celsius, fahrenheit, epochs=1000, verbose=False)
print("Modelo entrenado")

# Resultado de la función de pérdida

import matplotlib.pyplot as plt
plt.xlabel("Vuelta")
plt.ylabel("Magintud de pérdida")
plt.plot(historial.history["loss"])

# Predicción

print("Una predicción")
resultado = modelo.predict(np.array([100.0])) #Hay que convertirlo a array que es lo que el método espera recibir.
print("El reusltado es "+ str(resultado)+" fahrenheit")

# Para ver los valores que se le han asignado a el peso y al sesgo.
print("Variables internas del modelo")
#print(capa.get_weights())

print(oculta1.get_weights())
print(oculta2.get_weights())
print(salida.get_weights())